// <auto-generated />
using System;
using BookLibraryApi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BookLibraryApi.Migrations
{
    [DbContext(typeof(BookLibraryContext))]
    partial class BookLibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Russian_Russia.1251")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BookLibraryApi.Models.Author", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("BookLibraryApi.Models.AuthorBookLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BookId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex(new[] { "BookId", "AuthorId" }, "AuthorBookUniq")
                        .IsUnique();

                    b.ToTable("AuthorBookLink");
                });

            modelBuilder.Entity("BookLibraryApi.Models.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("BookLibraryApi.Models.AuthorBookLink", b =>
                {
                    b.HasOne("BookLibraryApi.Models.Author", "Author")
                        .WithMany("AuthorBookLinks")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("AuthorBookLink_AuthorId_fkey");

                    b.HasOne("BookLibraryApi.Models.Book", "Book")
                        .WithMany("AuthorBookLinks")
                        .HasForeignKey("BookId")
                        .HasConstraintName("AuthorBookLink_BookId_fkey");

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookLibraryApi.Models.Author", b =>
                {
                    b.Navigation("AuthorBookLinks");
                });

            modelBuilder.Entity("BookLibraryApi.Models.Book", b =>
                {
                    b.Navigation("AuthorBookLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
